CREATE TABLE rentalhome_pay
(
	pay_idx int NOT NULL AUTO_INCREMENT,
	room_idx int NOT NULL,
	kind varchar(10),
	bank varchar(20),
	price int,
	pay_date datetime DEFAULT now(),
	pay_stauts varchar(10),
	refund_request_date datetime,
	refund_complete_date datetime,
	accountholder varchar(20),
	start_date datetime,
	end_date datetime,
	uNo int NOT NULL,
	PRIMARY KEY (pay_idx)
);

CREATE TABLE rentalhome_price
(
	price_idx int NOT NULL AUTO_INCREMENT,
	room_idx int NOT NULL,
	change_yn char DEFAULT 'N' NOT NULL,
	reason varchar(20),
	start_date datetime,
	end_date datetime,
	rate int,
	fix int,
	PRIMARY KEY (price_idx)
);

CREATE TABLE rentalhome
(
	rentalhome_idx int NOT NULL AUTO_INCREMENT,
	name varchar(100),
    	address varchar(100),
	info text,
   	type varchar(20),
	inPool_yn char default 'N',
    	outPool_yn char default 'N',
	parking_yn char default 'N',
	pickup_yn char default 'N',
	wifi_yn char default 'N',
	beach_yn char default 'N',
	bbq_yn char default 'N',
	breakfast_yn char default 'N',
	animal_yn char default 'N',
   	checkIn char(5) NOT NULL,
   	checkOut char(5) NOT NULL,
	checkIn_info varchar(100) NOT NULL,
   	breakfast_price int,
    	breakfast_open char(5),
    	breakfast_close char(5),
   	breakfast_day varchar(100),
	uNo int NOT NULL,
	PRIMARY KEY (rentalhome_idx)
);

CREATE TABLE rentalhome_attach
(
	attach_idx int NOT NULL AUTO_INCREMENT,
	rentalhome_idx int NOT NULL,
	logical_name varchar(100),
	physical_name varchar(100),
	thumbnail char DEFAULT 'N',
	PRIMARY KEY (attach_idx)
);

CREATE TABLE rentalhome_report
(
	report_idx int NOT NULL AUTO_INCREMENT,
	rentalhome_idx int NOT NULL,
	report_contents varchar(255),
	report_date datetime DEFAULT NOW(),
	report_process varchar(10),
	report_reason varchar(20),
	uNo int NOT NULL,
	PRIMARY KEY (report_idx)
);

CREATE TABLE rentalhome_review
(
	review_idx int NOT NULL AUTO_INCREMENT,
    	room_idx int NOT NULL,
	rentalhome_idx int NOT NULL,
	contents text,
	kind int,
	facility int,
	clean int,
	price int,
    	wdate datetime DEFAULT now(),
	uNo int NOT NULL,
	PRIMARY KEY (review_idx)
);

CREATE TABLE rentalhome_review_attach
(
	attach_idx int NOT NULL AUTO_INCREMENT,
	review_idx int NOT NULL,
	logical_name varchar(255),
	physical_name varchar(255),
	PRIMARY KEY (attach_idx)
);

CREATE TABLE rentalhome_review_report
(
	report_idx int NOT NULL AUTO_INCREMENT,
	review_idx int NOT NULL,
	report_date datetime DEFAULT NOW(),
	report_contents varchar(255),
	report_process varchar(10),
	uNo int NOT NULL,
	PRIMARY KEY (report_idx)
);

CREATE TABLE rentalhome_room
(
	room_idx int NOT NULL auto_increment,
	rentalhome_idx int NOT NULL,
	name varchar(30) NOT NULL,
	min_person int NOT NULL,
	max_person int NOT NULL,
	weekday_price int,
	weekend_price int,
	smoking char DEFAULT 'N',
    	wifi char DEFAULT 'N',
	bed_info varchar(50),
	PRIMARY KEY (room_idx)
);

CREATE TABLE rentalhome_room_attach
(
	attach_idx int NOT NULL AUTO_INCREMENT,
	room_idx int NOT NULL,
	logical_name varchar(255),
	physical_name varchar(255),
	thumbnail char DEFAULT 'N',
	PRIMARY KEY (attach_idx)
);

CREATE TABLE rentalhome_like
(
	like_idx int NOT NULL AUTO_INCREMENT,
	rentalhome_idx int NOT NULL,
	uNo int NOT NULL,
	PRIMARY KEY (like_idx)
);


CREATE TABLE User
(
	uNo int NOT NULL AUTO_INCREMENT,
	uId varchar(50),
	uPw text,
	uName varchar(50),
	uNick varchar(50),
	uPhone varchar(50),
	uAddsPostCode VARCHAR(20) comment "우편번호",
	uRoadAddress text comment "도로명주소",
	uJibunAddress text comment "지번주소",
	uDetailAddress text comment "상세주소",
	uDate datetime DEFAULT NOW(),
	uImg text,
	uPoint int DEFAULT 0,
	uType char(10) ,
	uSocialType char(10) DEFAULT 'N',
	uDely char(2) DEFAULT 'N',
	PRIMARY KEY (uNo)

);

ALTER TABLE rentalhome_pay
	ADD FOREIGN KEY (room_idx)
	REFERENCES rentalhome_room (room_idx)
	ON UPDATE CASCADE
	ON DELETE CASCADE
;

ALTER TABLE rentalhome_pay
	ADD FOREIGN KEY (uNo)
	REFERENCES user (uNo)
	ON UPDATE CASCADE
	ON DELETE CASCADE
;
ALTER TABLE rentalhome_room
	ADD FOREIGN KEY (rentalhome_idx)
	REFERENCES rentalhome (rentalhome_idx)
	ON UPDATE CASCADE
	ON DELETE CASCADE
;

ALTER TABLE rentalhome_room_attach
	ADD FOREIGN KEY (room_idx)
	REFERENCES rentalhome_room (room_idx)
	ON UPDATE CASCADE
	ON DELETE CASCADE
;

ALTER TABLE rentalhome_attach
	ADD FOREIGN KEY (rentalhome_idx)
	REFERENCES rentalhome (rentalhome_idx)
	ON UPDATE CASCADE
	ON DELETE CASCADE
;

ALTER TABLE rentalhome_price
	ADD FOREIGN KEY (room_idx)
	REFERENCES rentalhome_room (room_idx)
	ON UPDATE CASCADE
	ON DELETE CASCADE
;

ALTER TABLE rentalhome_review
	ADD FOREIGN KEY (rentalhome_idx)
	REFERENCES rentalhome (rentalhome_idx)
	ON UPDATE CASCADE
	ON DELETE CASCADE
;

ALTER TABLE rentalhome_review
	ADD FOREIGN KEY (uNo)
	REFERENCES User (uNo)
	ON UPDATE CASCADE
	ON DELETE CASCADE
;

ALTER TABLE rentalhome_review
	ADD FOREIGN KEY (room_idx)
	REFERENCES rentalhome_room (room_idx)
	ON UPDATE CASCADE
	ON DELETE CASCADE
;

ALTER TABLE rentalhome
	ADD FOREIGN KEY (uNo)
	REFERENCES User (uNo)
	ON UPDATE CASCADE
	ON DELETE CASCADE
;

ALTER TABLE rentalhome_review_attach
	ADD FOREIGN KEY (review_idx)
	REFERENCES rentalhome_review (review_idx)
	ON UPDATE CASCADE
	ON DELETE CASCADE
;

ALTER TABLE rentalhome_review_report
	ADD FOREIGN KEY (uNo)
	REFERENCES User (uNo)
	ON UPDATE CASCADE
	ON DELETE CASCADE
;

ALTER TABLE rentalhome_review_report
	ADD FOREIGN KEY (review_idx)
	REFERENCES rentalhome_review (review_idx)
	ON UPDATE CASCADE
	ON DELETE CASCADE
;

ALTER TABLE rentalhome_report
	ADD FOREIGN KEY (rentalhome_idx)
	REFERENCES rentalhome (rentalhome_idx)
	ON UPDATE CASCADE
	ON DELETE CASCADE
;

ALTER TABLE rentalhome_report
	ADD FOREIGN KEY (uNo)
	REFERENCES User (uNo)
	ON UPDATE CASCADE
	ON DELETE CASCADE
;

ALTER TABLE rentalhome_like
	ADD FOREIGN KEY (uNo)
	REFERENCES User (uNo)
	ON UPDATE CASCADE
	ON DELETE CASCADE
;

ALTER TABLE rentalhome ADD status char DEFAULT 'Y';
ALTER TABLE rentalhome_room ADD status char DEFAULT 'Y';

ALTER TABLE rentalhome_pay ADD guset varchar(100) not null;
ALTER TABLE rentalhome_pay ADD guset_tel char(11) not null;
ALTER TABLE rentalhome_pay ADD guest_email varchar(100) not null;
ALTER TABLE rentalhome_pay ADD reqeust text;

ALTER TABLE rentalhome_review DROP CONSTRAINT rentalhome_review_ibfk_1;
ALTER TABLE rentalhome_review DROP rentalhome_idx;
ALTER TABLE rentalhome_review ADD stay_date date null;
ALTER TABLE rentalhome_review ADD service int;

ALTER TABLE rentalhome_price DROP change_yn ;


ALTER TABLE rentalhome_pay ADD reserve_number varchar(50) NOT NULL;
ALTER TABLE rentalhome_pay MODIFY pay_idx varchar(50);

ALTER TABLE rentalhome_pay CHANGE guset guest_name varchar(100) not null;
ALTER TABLE rentalhome_pay CHANGE guset_tel guest_tel varchar(100) not null;
ALTER TABLE rentalhome_pay CHANGE pay_stauts pay_status varchar(10) not null;
ALTER TABLE rentalhome_pay CHANGE reqeust request text not null;
ALTER TABLE rentalhome_pay CHANGE start_date start_date date not null;
ALTER TABLE rentalhome_pay CHANGE end_date end_date date not null;
ALTER TABLE rentalhome_pay ADD product VARCHAR(100)  NOT NULL;
ALTER TABLE rentalhome_pay ADD product_name VARCHAR(100) NOT NULL;
ALTER TABLE rentalhome_pay ADD point int NULL;
ALTER TABLE rentalhome_pay ADD discount int NOT NULL;

ALTER TABLE rentalhome_price DROP start_date;
ALTER TABLE rentalhome_price DROP end_date;

ALTER TABLE rentalhome_pay DROP refund_request_date;
ALTER TABLE rentalhome_pay DROP accountholder;
ALTER TABLE rentalhome_pay CHANGE refund_complete_date refund_date DATETIME;

ALTER TABLE rentalhome_room ADD discount_reason varchar(100);
ALTER TABLE rentalhome_room ADD discount_type varchar(10);
ALTER TABLE rentalhome_room ADD discount_money int;
ALTER TABLE rentalhome_pay ADD review_yn char default 'N';
ALTER TABLE rentalhome_review_report ADD review_report_reason varchar(20) not null;
ALTER TABLE rentalhome_review_report MODIFY report_process char default 'N' not null;
ALTER TABLE rentalhome_review_report CHANGE report_process review_report_process char default'N' not null;
ALTER TABLE rentalhome_review_report CHANGE report_contents review_report_contents text not null;
ALTER TABLE rentalhome_room ADD weekday_discount_price int;
ALTER TABLE rentalhome_room ADD weekend_discount_price int;
ALTER TABLE rentalhome_review ADD status char default 'Y';


CREATE TABLE food
    (
        fNo int NOT NULL AUTO_INCREMENT, 
        uNo int NOT NULL,
        food_name varchar(255) NOT NULL, 
        food_address varchar(255) NOT NULL, 
        food_phone varchar(255), 
        food_food_kind varchar(255), 
        food_avg_price varchar(255),
        food_working_hours varchar(255), 
        food_holiday varchar(255), 
        food_website varchar(255),
        food_content text,
        ltype char(2), 
        status char default 'Y',
        food_write_date datetime default now(),
	food_hit int default 0,
        FOREIGN KEY (uNo) REFERENCES User (uNo),
        PRIMARY KEY (fNo) 
    );


CREATE TABLE food_menu 
(
    food_menu_number int NOT NULL AUTO_INCREMENT,
    fNo int NOT NULL,
    food_menu_name varchar(255),
    food_menu_price varchar(255),
    PRIMARY KEY (food_menu_number),
    FOREIGN KEY (fNo) REFERENCES food(fNo)
);


CREATE TABLE food_attach 
(
	food_attach_number int NOT NULL AUTO_INCREMENT,
	fNo int NOT NULL,
	food_attach_logical_name varchar(255),
	food_attach_physical_name varchar(255),
	thumbnail char(1),
        FOREIGN KEY (fNo) REFERENCES food (fNo),
	PRIMARY KEY (food_attach_number)
);



CREATE TABLE food_review
(
	food_review_number int NOT NULL AUTO_INCREMENT,
	food_review_content text,
	food_review_writedate datetime DEFAULT NOW(),
	food_review_grade int not null default 5,
	fNo int NOT NULL,
	uNo int NOT NULL,
	FOREIGN KEY (fNo) REFERENCES food (fNo),
	FOREIGN KEY (uNo) REFERENCES User (uNo),
	PRIMARY KEY (food_review_number)
);



CREATE TABLE food_like
(
	food_like_number int NOT NULL AUTO_INCREMENT,
	fNo int NOT NULL,
	uNo int NOT NULL,
	FOREIGN KEY (fNo) REFERENCES food(fNo),
	FOREIGN KEY (uNo) REFERENCES User(uNo),
	PRIMARY KEY (food_like_number)
);


CREATE TABLE food_report
(
	food_report_number int NOT NULL AUTO_INCREMENT,
	food_report_date datetime default now(),
	food_report_content text,
	food_report_state char default 'N',
	food_report_reson varchar(255),
	fNo int NOT NULL,
	uNo int NOT NULL,
	FOREIGN KEY (fNo) REFERENCES food(fNo),
	FOREIGN KEY (uNo) REFERENCES User(uNo),
	PRIMARY KEY (food_report_number)
);




CREATE TABLE food_review_report 
(
	food_review_report_number int NOT NULL AUTO_INCREMENT,
	food_review_report_date datetime default now(),
	food_review_report_content text,
	food_review_report_state char default 'N',
	food_review_report_reson varchar(255),
	food_review_number int NOT NULL,
	uNo int NOT NULL,
	FOREIGN KEY (food_review_number) REFERENCES food_review(food_review_number),
	FOREIGN KEY (uNo) REFERENCES User(uNo),
	PRIMARY KEY (food_review_report_number)
);





CREATE TABLE `event_index` (
  `event_number` int NOT NULL AUTO_INCREMENT COMMENT '글 작성 시 기존에 있는 마지막 글 번호 + 1 의 값으로 자동생성',
  `event_title` varchar(30) DEFAULT NULL COMMENT '값이 존재하지 않거나, 공백문자만 존재할 수 없음',
  `event_content` longtext COMMENT '값이 존재하지 않거나, 공백문자만 존재할 수 없음',
  `write_date` datetime DEFAULT CURRENT_TIMESTAMP COMMENT '글 작성 시 그 때의 날짜로 저장, 글 수정 시에는 동기화 하지 않음',
  `hit_count` int DEFAULT '0' COMMENT '계정 당 한 가지 글에 대해서 증가시킬 수 있는 조회수에 한계를 둠',
  `event_tel` varchar(255) DEFAULT NULL,
  `event_start` varchar(30) DEFAULT NULL,
  `event_end` varchar(30) DEFAULT NULL,
  `event_local` varchar(30) DEFAULT NULL,
  `LType` char(2) DEFAULT NULL,
  `uNo` int NOT NULL,
  `status` char(1) DEFAULT 'Y',
  `event_discript` text,
  PRIMARY KEY (`event_number`),
  KEY `uNo` (`uNo`),
  CONSTRAINT `event_index_ibfk_2` FOREIGN KEY (`uNo`) REFERENCES `user` (`uNo`) ON DELETE CASCADE ON UPDATE CASCADE
);


CREATE TABLE `event_attach` (
  `attach_number` int NOT NULL AUTO_INCREMENT COMMENT '파일 첨부 시 기존에 있는 마지막 첨부파일 번호 + 1 의 값으로 자동생성',
  `event_number` int NOT NULL COMMENT '글 작성 시 기존에 있는 마지막 글 번호 + 1 의 값으로 자동생성',
  `attach_logical_name` varchar(255) DEFAULT NULL COMMENT '글 작성 시 or 글 수정 시 저장 가능',
  `attach_physical_name` varchar(255) DEFAULT NULL COMMENT '글 작성 시 or 글 수정 시 저장 가능',
  `Thumbnail` char(1) DEFAULT 'N',
  PRIMARY KEY (`attach_number`),
  KEY `event_number` (`event_number`),
  CONSTRAINT `event_attach_ibfk_1` FOREIGN KEY (`event_number`) REFERENCES `event_index` (`event_number`) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT `event_attach_ibfk_2` FOREIGN KEY (`event_number`) REFERENCES `event_index` (`event_number`) ON DELETE CASCADE ON UPDATE CASCADE
);


CREATE TABLE event_like (
  event_number int NOT NULL COMMENT '글 작성 시 기존에 있는 마지막 글 번호 + 1 의 값으로 자동생성',
  uNo int NOT NULL,
  event_like_number int NOT NULL AUTO_INCREMENT,
   PRIMARY KEY (event_like_number),
  KEY event_number (event_number),
  KEY uNo (uNo),
  CONSTRAINT `event_like_ibfk_1` FOREIGN KEY (`event_number`) REFERENCES `event_index` (`event_number`) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT `event_like_ibfk_2` FOREIGN KEY (`uNo`) REFERENCES `user` (`uNo`) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE `event_report` (
  `event_number` int NOT NULL COMMENT '글 작성 시 기존에 있는 마지막 글 번호 + 1 의 값으로 자동생성',
  `event_report_date` datetime DEFAULT CURRENT_TIMESTAMP,
  `event_report_content` text,
  `event_report_state` int DEFAULT NULL,
  `uNo` int NOT NULL,
  KEY `event_number` (`event_number`),
  KEY `uNo` (`uNo`),
  CONSTRAINT `event_report_ibfk_1` FOREIGN KEY (`event_number`) REFERENCES `event_index` (`event_number`) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT `event_report_ibfk_2` FOREIGN KEY (`uNo`) REFERENCES `user` (`uNo`) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE `event_review_list` (
  `comment_number` int NOT NULL AUTO_INCREMENT COMMENT '댓글 작성 시 기존에 있는 마지막 댓글 번호 +1 의 값으로 자동생성',
  `event_number` int NOT NULL COMMENT '글 작성 시 기존에 있는 마지막 글 번호 + 1 의 값으로 자동생성',
  `comment_title` varchar(30) DEFAULT NULL,
  `comment_content` text COMMENT '값이 존재하지 않거나, 공백문자만 존재할 수 없음',
  `write_date` datetime DEFAULT CURRENT_TIMESTAMP COMMENT '댓글 작성 시 그 때의 날짜로 저장, 댓글 수정 시에는 동기화 하지 않음',
  `uNo` int NOT NULL,
  `event_review_grade` int NOT NULL DEFAULT '5',
  PRIMARY KEY (`comment_number`),
  KEY `event_number` (`event_number`),
  KEY `uNo` (`uNo`),
  CONSTRAINT `event_review_list_ibfk_1` FOREIGN KEY (`event_number`) REFERENCES `event_index` (`event_number`) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT `event_review_list_ibfk_2` FOREIGN KEY (`uNo`) REFERENCES `user` (`uNo`) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE `event_review_attach` (
  `event_review_ano` int NOT NULL AUTO_INCREMENT,
  `event_review_logical_name` varchar(255) DEFAULT NULL,
  `event_review_physical_name` varchar(255) DEFAULT NULL,
  `comment_number` int NOT NULL COMMENT '댓글 작성 시 기존에 있는 마지막 댓글 번호 +1 의 값으로 자동생성',
  PRIMARY KEY (`event_review_ano`),
  KEY `comment_number` (`comment_number`),
  CONSTRAINT `event_review_attach_ibfk_1` FOREIGN KEY (`comment_number`) REFERENCES `event_review_list` (`comment_number`) ON DELETE RESTRICT ON UPDATE RESTRICT
);

CREATE TABLE `event_review_like` (
  `comment_number` int NOT NULL COMMENT '댓글 작성 시 기존에 있는 마지막 댓글 번호 +1 의 값으로 자동생성',
  `uNo` int NOT NULL,
  event_review_like_number int NOT NULL AUTO_INCREMENT,
  KEY `comment_number` (`comment_number`),
  KEY `uNo` (`uNo`),
  PRIMARY KEY (`event_review_like_number`),
  CONSTRAINT `event_review_like_ibfk_1` FOREIGN KEY (`comment_number`) REFERENCES `event_review_list` (`comment_number`) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT `event_review_like_ibfk_2` FOREIGN KEY (`uNo`) REFERENCES `user` (`uNo`) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE `event_review_report` (
  `comment_number` int NOT NULL COMMENT '댓글 작성 시 기존에 있는 마지막 댓글 번호 +1 의 값으로 자동생성',
  `uNo` int NOT NULL,
  `event_review_report_date` datetime DEFAULT NULL,
  `event_review_report_content` text,
  `event_review_report_state` int DEFAULT NULL,
  KEY `comment_number` (`comment_number`),
  KEY `uNo` (`uNo`),
  CONSTRAINT `event_review_report_ibfk_1` FOREIGN KEY (`comment_number`) REFERENCES `event_review_list` (`comment_number`) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT `event_review_report_ibfk_2` FOREIGN KEY (`uNo`) REFERENCES `user` (`uNo`) ON DELETE CASCADE ON UPDATE CASCADE
);

